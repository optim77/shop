<?php
/**
 * Created by PhpStorm.
 * User: NASA
 * Date: 2017-10-22
 * Time: 12:01
 */

namespace ShopBundle\Entity;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Security\Core\User\AdvancedUserInterface;

/**
 * @ORM\Entity
 * @ORM\Table(name="user")
 *
 * @UniqueEntity(fields={"email"})
 *
 */
class Users implements AdvancedUserInterface, \Serializable
{


    /**
     * @ORM\Column(type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(groups = {"Register"} )
     * @Assert\Length(
     *     min=2,
     *     max=20,
     *     groups = {"Register"}
     * )
     */
    private $name;

    /**
     * @ORM\Column(type="string", length=50)
     * @Assert\NotBlank(groups = {"Register"})
     * @Assert\Length(
     *     min=2,
     *     max=30,
     *     groups = {"Register"}
     * )
     */
    private $username;

    /**
     * @ORM\Column(type="string", length=120, unique=true)
     *
     * @Assert\NotBlank(groups={"Login", "Register"})
     *
     * @Assert\Length(
     *     min=10,
     *     max=100,
     *     groups = {"Login","Register"}
     * )
     */
    private $email;

    /**
     * @ORM\Column(type="string", length=64)
     */
    private $password;

    /**
     * @Assert\NotBlank(groups = {"Register", "Login"})
     *
     * @Assert\Length(min=8,max=4096,groups = {"Register", "Login"})
     */
    private $plainPassword;

    /**
     * @ORM\Column(type="integer")
     *
     * @Assert\NotBlank(groups={"Register"})
     */
    private $country;

    /**
     * @ORM\Column(type="string")
     *
     * @Assert\NotBlank(groups={"Registry"})
     *
     */
    private $zipCode;

    /**
     * @ORM\Column(type="string")
     *
     * @Assert\NotBlank(groups={"Registry"})
     */
    private $street;

    /**
     * @ORM\Column(type="string")
     *
     * @Assert\NotBlank(groups={"Registry"})
     */
    private $number;

    /**
     * @ORM\Column(type="string")
     *
     * @Assert\NotBlank(groups={"Registry"})
     */
    private $region;

    /**
     * @ORM\Column(type="integer")
     *
     * @Assert\NotBlank(groups={"Registry"})
     */
    private $phone;

    /**
     * @ORM\Column(type="string", nullable=true )
     */
    private $basket = null;

    /**
     * @ORM\Column(type="string", nullable=true)
     */
    private $bought = null;

    /**
     * @ORM\Column(type="datetime")
     */
    private $joinDate;

    /**
     * @ORM\Column(name="account_non_expired", type="boolean")
     */
    private $accountNonExpired = true;

    /**
     * @ORM\Column(name="account_non_locked", type="boolean")
     */
    private $accountNonLocked = true;

    /**
     * @ORM\Column(name="credentials_non_expired", type="boolean")
     */
    private $credentialsNonExpired = true;

    /**
     * @ORM\Column(type="boolean")
     */
    private $enabled = false;

    /**
     * @ORM\Column(type="array")
     */
    private $roles;

    /**
     * @ORM\Column(name="action_token", type="string", length=20, nullable=true)
     */
    private $actionToken;

    public function isAccountNonExpired(){
        return $this->accountNonExpired;
    }

    public function isAccountNonLocked(){
        return $this->accountNonLocked;
    }

    public function isCredentialsNonExpired(){
        return $this->credentialsNonExpired;
    }

    public function isEnabled(){
        return $this->enabled;
    }

    public function serialize() {
        return serialize(array(
            $this->id,
            $this->email,
            $this->password
        ));
    }

    public function unserialize($serialized) {
        list(
            $this->id,
            $this->email,
            $this->password
            ) = unserialize($serialized);
    }

    public function getRoles() {
        if(empty($this->roles)){
            return array('ROLE_USER');
        }
        return $this->roles;
    }

    public function getPassword(){
        return $this->password;
    }

    public function getSalt(){
        return null;
    }

    public function getUsername(){
        return $this->username;
    }

    public function eraseCredentials(){
        $this->plainPassword = null;
    }


}